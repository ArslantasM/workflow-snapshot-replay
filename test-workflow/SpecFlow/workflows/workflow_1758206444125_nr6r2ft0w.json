{
  "id": "workflow_1758206444125_nr6r2ft0w",
  "startTime": 1758206444125,
  "endTime": 1758207111409,
  "events": [
    {
      "type": "session_started",
      "timestamp": 1758206444125,
      "data": {
        "workspace": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow"
      }
    },
    {
      "type": "file_modified",
      "timestamp": 1758206493854,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\.specstory\\history\\2025-09-18_09-38Z-test-başlatma-süreci.md",
        "relativePath": ".specstory/history/2025-09-18_09-38Z-test-başlatma-süreci.md"
      }
    },
    {
      "type": "file_created",
      "timestamp": 1758206592754,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\artillery_analysis.py",
        "relativePath": "artillery_analysis.py"
      }
    },
    {
      "type": "text_changed",
      "timestamp": 1758206593231,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\artillery_analysis.py",
        "relativePath": "artillery_analysis.py",
        "changes": [
          {
            "range": {
              "start": {
                "line": 0,
                "character": 0
              },
              "end": {
                "line": 0,
                "character": 0
              }
            },
            "text": "#!/usr/bin/env python3\r\n# -*- coding: utf-8 -*-\r\n\"\"\"\r\nTopçu Mermisi Atış Analizi Sistemi\r\nNamlu açısı, mesafe ve konum analizleri yapan gelişmiş bir uygulama\r\n\r\nÖzellikler:\r\n- Balistik hesaplamalar\r\n- Trajectory analizi\r\n- Grafik görselleştirme\r\n- Interaktif GUI\r\n- Detaylı analiz raporları\r\n\"\"\"\r\n\r\nimport tkinter as tk\r\nfrom tkinter import ttk, messagebox, filedialog\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\r\nimport numpy as np\r\nimport math\r\nimport json\r\nfrom datetime import datetime\r\nimport os\r\n\r\nclass BallisticCalculator:\r\n    \"\"\"Balistik hesaplamalar için ana sınıf\"\"\"\r\n    \r\n    def __init__(self):\r\n        # Fiziksel sabitler\r\n        self.g = 9.81  # Yerçekimi ivmesi (m/s²)\r\n        self.air_density = 1.225  # Hava yoğunluğu (kg/m³)\r\n        \r\n    def calculate_trajectory(self, v0, angle_deg, drag_coeff=0.0, mass=1.0, \r\n                           diameter=0.1, wind_speed=0.0, elevation=0.0):\r\n        \"\"\"\r\n        Mermi yörüngesini hesaplar\r\n        \r\n        Args:\r\n            v0: İlk hız (m/s)\r\n            angle_deg: Namlu açısı (derece)\r\n            drag_coeff: Hava direnci katsayısı\r\n            mass: Mermi kütlesi (kg)\r\n            diameter: Mermi çapı (m)\r\n            wind_speed: Rüzgar hızı (m/s)\r\n            elevation: Yükseklik (m)\r\n        \r\n        Returns:\r\n            dict: Trajectory verileri\r\n        \"\"\"\r\n        angle_rad = math.radians(angle_deg)\r\n        \r\n        # Başlangıç hız bileşenleri\r\n        v0x = v0 * math.cos(angle_rad)\r\n        v0y = v0 * math.sin(angle_rad)\r\n        \r\n        # Hava direnci hesaplamaları\r\n        area = math.pi * (diameter / 2) ** 2\r\n        drag_factor = 0.5 * self.air_density * drag_coeff * area / mass\r\n        \r\n        # Zaman adımı ve maksimum zaman\r\n        dt = 0.01\r\n        max_time = 2 * v0y / self.g + 10  # Güvenlik marjı\r\n        \r\n        # Veriler için listeler\r\n        times = []\r\n        x_positions = []\r\n        y_positions = []\r\n        velocities = []\r\n        angles = []\r\n        \r\n        # Başlangıç değerleri\r\n        t = 0\r\n        x, y = 0, elevation\r\n        vx, vy = v0x, v0y\r\n        \r\n        while y >= 0 and t <= max_time:\r\n            # Mevcut değerleri kaydet\r\n            times.append(t)\r\n            x_positions.append(x)\r\n            y_positions.append(y)\r\n            \r\n            # Hız ve açı hesapla\r\n            v_total = math.sqrt(vx**2 + vy**2)\r\n            current_angle = math.degrees(math.atan2(vy, vx))\r\n            velocities.append(v_total)\r\n            angles.append(current_angle)\r\n            \r\n            # Hava direnci kuvvetleri\r\n            if drag_coeff > 0:\r\n                drag_force = drag_factor * v_total\r\n                drag_x = -drag_force * (vx / v_total) if v_total > 0 else 0\r\n                drag_y = -drag_force * (vy / v_total) if v_total > 0 else 0\r\n            else:\r\n                drag_x = drag_y = 0\r\n            \r\n            # Rüzgar etkisi\r\n            wind_effect = wind_speed * dt\r\n            \r\n            # Hız güncellemesi\r\n            ax = drag_x + wind_effect\r\n            ay = -self.g + drag_y\r\n            \r\n            vx += ax * dt\r\n            vy += ay * dt\r\n            \r\n            # Konum güncellemesi\r\n            x += vx * dt\r\n            y += vy * dt\r\n            \r\n            t += dt\r\n        \r\n        # Analiz sonuçları\r\n        max_height = max(y_positions) if y_positions else 0\r\n        max_range = max(x_positions) if x_positions else 0\r\n        flight_time = times[-1] if times else 0\r\n        \r\n        return {\r\n            'times': times,\r\n            'x_positions': x_positions,\r\n            'y_positions': y_positions,\r\n            'velocities': velocities,\r\n            'angles': angles,\r\n            'max_height': max_height,\r\n            'max_range': max_range,\r\n            'flight_time': flight_time,\r\n            'impact_velocity': velocities[-1] if velocities else 0,\r\n            'impact_angle': angles[-1] if angles else 0\r\n        }\r\n    \r\n    def calculate_optimal_angle(self, v0, target_distance, elevation=0.0):\r\n        \"\"\"Belirli bir mesafe için optimal açıyı hesaplar\"\"\"\r\n        best_angle = 45\r\n        min_error = float('inf')\r\n        \r\n        for angle in range(1, 90):\r\n            trajectory = self.calculate_trajectory(v0, angle, elevation=elevation)\r\n            error = abs(trajectory['max_range'] - target_distance)\r\n            \r\n            if error < min_error:\r\n                min_error = error\r\n                best_angle = angle\r\n        \r\n        return best_angle, min_error\r\n    \r\n    def calculate_hit_probability(self, trajectory, target_x, target_y, target_radius=5.0):\r\n        \"\"\"Hedefe isabet olasılığını hesaplar\"\"\"\r\n        if not trajectory['x_positions']:\r\n            return 0.0\r\n        \r\n        # En yakın noktayı bul\r\n        min_distance = float('inf')\r\n        for x, y in zip(trajectory['x_positions'], trajectory['y_positions']):\r\n            distance = math.sqrt((x - target_x)**2 + (y - target_y)**2)\r\n            min_distance = min(min_distance, distance)\r\n        \r\n        # Olasılık hesapla (basit model)\r\n        if min_distance <= target_radius:\r\n            return max(0.0, 1.0 - (min_distance / target_radius))\r\n        else:\r\n            return max(0.0, 1.0 - (min_distance / (target_radius * 3)))\r\n\r\nclass ArtilleryAnalysisGUI:\r\n    \"\"\"Ana GUI sınıfı\"\"\"\r\n    \r\n    def __init__(self, root):\r\n        self.root = root\r\n        self.root.title(\"🎯 Topçu Mermisi Atış Analizi Sistemi\")\r\n        self.root.geometry(\"1400x900\")\r\n        self.root.configure(bg='#2c3e50')\r\n        \r\n        # Balistik hesaplayıcı\r\n        self.calculator = BallisticCalculator()\r\n        \r\n        # Mevcut trajectory verisi\r\n        self.current_trajectory = None\r\n        \r\n        # Stil ayarları\r\n        self.setup_styles()\r\n        \r\n        # GUI bileşenlerini oluştur\r\n        self.create_widgets()\r\n        \r\n        # Başlangıç değerleri\r\n        self.load_default_values()\r\n    \r\n    def setup_styles(self):\r\n        \"\"\"GUI stillerini ayarla\"\"\"\r\n        style = ttk.Style()\r\n        style.theme_use('clam')\r\n        \r\n        # Özel stiller\r\n        style.configure('Title.TLabel', font=('Arial', 16, 'bold'), \r\n                       background='#2c3e50', foreground='#ecf0f1')\r\n        style.configure('Header.TLabel', font=('Arial', 12, 'bold'),\r\n                       background='#34495e', foreground='#ecf0f1')\r\n        style.configure('Info.TLabel', font=('Arial', 10),\r\n                       background='#34495e', foreground='#bdc3c7')\r\n    \r\n    def create_widgets(self):\r\n        \"\"\"GUI bileşenlerini oluştur\"\"\"\r\n        # Ana başlık\r\n        title_frame = tk.Frame(self.root, bg='#2c3e50')\r\n        title_frame.pack(fill='x', padx=10, pady=5)\r\n        \r\n        title_label = ttk.Label(title_frame, text=\"🎯 TOPÇU MERMİSİ ATIŞ ANALİZİ SİSTEMİ\",\r\n                               style='Title.TLabel')\r\n        title_label.pack()\r\n        \r\n        # Ana container\r\n        main_frame = tk.Frame(self.root, bg='#2c3e50')\r\n        main_frame.pack(fill='both', expand=True, padx=10, pady=5)\r\n        \r\n        # Sol panel - Kontroller\r\n        self.create_control_panel(main_frame)\r\n        \r\n        # Sağ panel - Grafik ve sonuçlar\r\n        self.create_results_panel(main_frame)\r\n    \r\n    def create_control_panel(self, parent):\r\n        \"\"\"Kontrol panelini oluştur\"\"\"\r\n        control_frame = tk.Frame(parent, bg='#34495e', relief='raised', bd=2)\r\n        control_frame.pack(side='left', fill='y', padx=(0, 5))\r\n        \r\n        # Başlık\r\n        ttk.Label(control_frame, text=\"⚙️ ATIŞ PARAMETRELERİ\", \r\n                 style='Header.TLabel').pack(pady=10)\r\n        \r\n        # Temel parametreler\r\n        self.create_basic_params(control_frame)\r\n        \r\n        # Gelişmiş parametreler\r\n        self.create_advanced_params(control_frame)\r\n        \r\n        # Hedef parametreler\r\n        self.create_target_params(control_frame)\r\n        \r\n        # Butonlar\r\n        self.create_buttons(control_frame)\r\n    \r\n    def create_basic_params(self, parent):\r\n        \"\"\"Temel parametreleri oluştur\"\"\"\r\n        frame = tk.LabelFrame(parent, text=\"🔧 Temel Parametreler\", \r\n                             bg='#34495e', fg='#ecf0f1', font=('Arial', 10, 'bold'))\r\n        frame.pack(fill='x', padx=10, pady=5)\r\n        \r\n        # İlk hız\r\n        tk.Label(frame, text=\"İlk Hız (m/s):\", bg='#34495e', fg='#bdc3c7').grid(row=0, column=0, sticky='w', padx=5, pady=2)\r\n        self.v0_var = tk.StringVar(value=\"300\")\r\n        tk.Entry(frame, textvariable=self.v0_var, width=10).grid(row=0, column=1, padx=5, pady=2)\r\n        \r\n        # Namlu açısı\r\n        tk.Label(frame, text=\"Namlu Açısı (°):\", bg='#34495e', fg='#bdc3c7').grid(row=1, column=0, sticky='w', padx=5, pady=2)\r\n        self.angle_var = tk.StringVar(value=\"45\")\r\n        tk.Entry(frame, textvariable=self.angle_var, width=10).grid(row=1, column=1, padx=5, pady=2)\r\n        \r\n        # Mermi kütlesi\r\n        tk.Label(frame, text=\"Mermi Kütlesi (kg):\", bg='#34495e', fg='#bdc3c7').grid(row=2, column=0, sticky='w', padx=5, pady=2)\r\n        self.mass_var = tk.StringVar(value=\"15.0\")\r\n        tk.Entry(frame, textvariable=self.mass_var, width=10).grid(row=2, column=1, padx=5, pady=2)\r\n        \r\n        # Mermi çapı\r\n        tk.Label(frame, text=\"Mermi Çapı (mm):\", bg='#34495e', fg='#bdc3c7').grid(row=3, column=0, sticky='w', padx=5, pady=2)\r\n        self.diameter_var = tk.StringVar(value=\"155\")\r\n        tk.Entry(frame, textvariable=self.diameter_var, width=10).grid(row=3, column=1, padx=5, pady=2)\r\n    \r\n    def create_advanced_params(self, parent):\r\n        \"\"\"Gelişmiş parametreleri oluştur\"\"\"\r\n        frame = tk.LabelFrame(parent, text=\"🌪️ Gelişmiş Parametreler\", \r\n                             bg='#34495e', fg='#ecf0f1', font=('Arial', 10, 'bold'))\r\n        frame.pack(fill='x', padx=10, pady=5)\r\n        \r\n        # Hava direnci\r\n        tk.Label(frame, text=\"Hava Direnci Kat.:\", bg='#34495e', fg='#bdc3c7').grid(row=0, column=0, sticky='w', padx=5, pady=2)\r\n        self.drag_var = tk.StringVar(value=\"0.47\")\r\n        tk.Entry(frame, textvariable=self.drag_var, width=10).grid(row=0, column=1, padx=5, pady=2)\r\n        \r\n        # Rüzgar hızı\r\n        tk.Label(frame, text=\"Rüzgar Hızı (m/s):\", bg='#34495e', fg='#bdc3c7').grid(row=1, column=0, sticky='w', padx=5, pady=2)\r\n        self.wind_var = tk.StringVar(value=\"0\")\r\n        tk.Entry(frame, textvariable=self.wind_var, width=10).grid(row=1, column=1, padx=5, pady=2)\r\n        \r\n        # Yükseklik\r\n        tk.Label(frame, text=\"Başlangıç Yük. (m):\", bg='#34495e', fg='#bdc3c7').grid(row=2, column=0, sticky='w', padx=5, pady=2)\r\n        self.elevation_var = tk.StringVar(value=\"0\")\r\n        tk.Entry(frame, textvariable=self.elevation_var, width=10).grid(row=2, column=1, padx=5, pady=2)\r\n    \r\n    def create_target_params(self, parent):\r\n        \"\"\"Hedef parametrelerini oluştur\"\"\"\r\n        frame = tk.LabelFrame(parent, text=\"🎯 Hedef Parametreleri\", \r\n                             bg='#34495e', fg='#ecf0f1', font=('Arial', 10, 'bold'))\r\n        frame.pack(fill='x', padx=10, pady=5)\r\n        \r\n        # Hedef mesafesi\r\n        tk.Label(frame, text=\"Hedef Mesafesi (m):\", bg='#34495e', fg='#bdc3c7').grid(row=0, column=0, sticky='w', padx=5, pady=2)\r\n        self.target_x_var = tk.StringVar(value=\"5000\")\r\n        tk.Entry(frame, textvariable=self.target_x_var, width=10).grid(row=0, column=1, padx=5, pady=2)\r\n        \r\n        # Hedef yüksekliği\r\n        tk.Label(frame, text=\"Hedef Yüksekliği (m):\", bg='#34495e', fg='#bdc3c7').grid(row=1, column=0, sticky='w', padx=5, pady=2)\r\n        self.target_y_var = tk.StringVar(value=\"0\")\r\n        tk.Entry(frame, textvariable=self.target_y_var, width=10).grid(row=1, column=1, padx=5, pady=2)\r\n        \r\n        # Hedef yarıçapı\r\n        tk.Label(frame, text=\"Hedef Yarıçapı (m):\", bg='#34495e', fg='#bdc3c7').grid(row=2, column=0, sticky='w', padx=5, pady=2)\r\n        self.target_radius_var = tk.StringVar(value=\"10\")\r\n        tk.Entry(frame, textvariable=self.target_radius_var, width=10).grid(row=2, column=1, padx=5, pady=2)\r\n    \r\n    def create_buttons(self, parent):\r\n        \"\"\"Butonları oluştur\"\"\"\r\n        button_frame = tk.Frame(parent, bg='#34495e')\r\n        button_frame.pack(fill='x', padx=10, pady=10)\r\n        \r\n        # Hesapla butonu\r\n        tk.Button(button_frame, text=\"🚀 Atış Hesapla\", \r\n                 command=self.calculate_trajectory,\r\n                 bg='#e74c3c', fg='white', font=('Arial', 10, 'bold')).pack(fill='x', pady=2)\r\n        \r\n        # Optimal açı butonu\r\n        tk.Button(button_frame, text=\"📐 Optimal Açı Bul\", \r\n                 command=self.find_optimal_angle,\r\n                 bg='#f39c12', fg='white', font=('Arial', 10, 'bold')).pack(fill='x', pady=2)\r\n        \r\n        # Karşılaştırma butonu\r\n        tk.Button(button_frame, text=\"📊 Açı Karşılaştırması\", \r\n                 command=self.compare_angles,\r\n                 bg='#3498db', fg='white', font=('Arial', 10, 'bold')).pack(fill='x', pady=2)\r\n        \r\n        # Rapor kaydet butonu\r\n        tk.Button(button_frame, text=\"💾 Rapor Kaydet\", \r\n                 command=self.save_report,\r\n                 bg='#27ae60', fg='white', font=('Arial', 10, 'bold')).pack(fill='x', pady=2)\r\n        \r\n        # Temizle butonu\r\n        tk.Button(button_frame, text=\"🗑️ Temizle\", \r\n                 command=self.clear_results,\r\n                 bg='#95a5a6', fg='white', font=('Arial', 10, 'bold')).pack(fill='x', pady=2)\r\n    \r\n    def create_results_panel(self, parent):\r\n        \"\"\"Sonuçlar panelini oluştur\"\"\"\r\n        results_frame = tk.Frame(parent, bg='#2c3e50')\r\n        results_frame.pack(side='right', fill='both', expand=True)\r\n        \r\n        # Notebook için tab'lar\r\n        self.notebook = ttk.Notebook(results_frame)\r\n        self.notebook.pack(fill='both', expand=True)\r\n        \r\n        # Grafik tab'ı\r\n        self.create_plot_tab()\r\n        \r\n        # Sonuçlar tab'ı\r\n        self.create_results_tab()\r\n        \r\n        # Analiz tab'ı\r\n        self.create_analysis_tab()\r\n    \r\n    def create_plot_tab(self):\r\n        \"\"\"Grafik tab'ını oluştur\"\"\"\r\n        plot_frame = ttk.Frame(self.notebook)\r\n        self.notebook.add(plot_frame, text=\"📈 Trajectory Grafiği\")\r\n        \r\n        # Matplotlib figure\r\n        self.fig, self.ax = plt.subplots(figsize=(10, 6))\r\n        self.fig.patch.set_facecolor('#2c3e50')\r\n        self.ax.set_facecolor('#34495e')\r\n        \r\n        # Canvas\r\n        self.canvas = FigureCanvasTkAgg(self.fig, plot_frame)\r\n        self.canvas.get_tk_widget().pack(fill='both', expand=True)\r\n        \r\n        # İlk grafik\r\n        self.plot_empty_trajectory()\r\n    \r\n    def create_results_tab(self):\r\n        \"\"\"Sonuçlar tab'ını oluştur\"\"\"\r\n        results_frame = ttk.Frame(self.notebook)\r\n        self.notebook.add(results_frame, text=\"📋 Detaylı Sonuçlar\")\r\n        \r\n        # Scrollable text widget\r\n        text_frame = tk.Frame(results_frame)\r\n        text_frame.pack(fill='both', expand=True, padx=10, pady=10)\r\n        \r\n        self.results_text = tk.Text(text_frame, bg='#34495e', fg='#ecf0f1',\r\n                                   font=('Courier', 10), wrap='word')\r\n        scrollbar = tk.Scrollbar(text_frame, orient='vertical', command=self.results_text.yview)\r\n        self.results_text.configure(yscrollcommand=scrollbar.set)\r\n        \r\n        self.results_text.pack(side='left', fill='both', expand=True)\r\n        scrollbar.pack(side='right', fill='y')\r\n    \r\n    def create_analysis_tab(self):\r\n        \"\"\"Analiz tab'ını oluştur\"\"\"\r\n        analysis_frame = ttk.Frame(self.notebook)\r\n        self.notebook.add(analysis_frame, text=\"🔍 Performans Analizi\")\r\n        \r\n        # Analiz sonuçları için text widget\r\n        text_frame = tk.Frame(analysis_frame)\r\n        text_frame.pack(fill='both', expand=True, padx=10, pady=10)\r\n        \r\n        self.analysis_text = tk.Text(text_frame, bg='#34495e', fg='#ecf0f1',\r\n                                    font=('Courier', 10), wrap='word')\r\n        scrollbar2 = tk.Scrollbar(text_frame, orient='vertical', command=self.analysis_text.yview)\r\n        self.analysis_text.configure(yscrollcommand=scrollbar2.set)\r\n        \r\n        self.analysis_text.pack(side='left', fill='both', expand=True)\r\n        scrollbar2.pack(side='right', fill='y')\r\n    \r\n    def load_default_values(self):\r\n        \"\"\"Varsayılan değerleri yükle\"\"\"\r\n        self.results_text.insert('1.0', \"🎯 Topçu Mermisi Atış Analizi Sistemi\\n\")\r\n        self.results_text.insert('end', \"=\" * 50 + \"\\n\\n\")\r\n        self.results_text.insert('end', \"📋 Hesaplama yapmak için parametreleri girin ve 'Atış Hesapla' butonuna basın.\\n\\n\")\r\n        \r\n        self.analysis_text.insert('1.0', \"🔍 Performans Analizi\\n\")\r\n        self.analysis_text.insert('end', \"=\" * 30 + \"\\n\\n\")\r\n        self.analysis_text.insert('end', \"📊 Analiz sonuçları burada görüntülenecek.\\n\\n\")\r\n    \r\n    def get_parameters(self):\r\n        \"\"\"GUI'den parametreleri al\"\"\"\r\n        try:\r\n            params = {\r\n                'v0': float(self.v0_var.get()),\r\n                'angle_deg': float(self.angle_var.get()),\r\n                'mass': float(self.mass_var.get()),\r\n                'diameter': float(self.diameter_var.get()) / 1000,  # mm to m\r\n                'drag_coeff': float(self.drag_var.get()),\r\n                'wind_speed': float(self.wind_var.get()),\r\n                'elevation': float(self.elevation_var.get()),\r\n                'target_x': float(self.target_x_var.get()),\r\n                'target_y': float(self.target_y_var.get()),\r\n                'target_radius': float(self.target_radius_var.get())\r\n            }\r\n            return params\r\n        except ValueError as e:\r\n            messagebox.showerror(\"Hata\", f\"Geçersiz parametre değeri: {e}\")\r\n            return None\r\n    \r\n    def calculate_trajectory(self):\r\n        \"\"\"Trajectory hesapla ve görüntüle\"\"\"\r\n        params = self.get_parameters()\r\n        if not params:\r\n            return\r\n        \r\n        try:\r\n            # Trajectory hesapla\r\n            self.current_trajectory = self.calculator.calculate_trajectory(\r\n                params['v0'], params['angle_deg'], params['drag_coeff'],\r\n                params['mass'], params['diameter'], params['wind_speed'], \r\n                params['elevation']\r\n            )\r\n            \r\n            # İsabet olasılığını hesapla\r\n            hit_prob = self.calculator.calculate_hit_probability(\r\n                self.current_trajectory, params['target_x'], \r\n                params['target_y'], params['target_radius']\r\n            )\r\n            \r\n            # Grafik çiz\r\n            self.plot_trajectory()\r\n            \r\n            # Sonuçları göster\r\n            self.display_results(params, hit_prob)\r\n            \r\n            # Analiz yap\r\n            self.perform_analysis(params)\r\n            \r\n        except Exception as e:\r\n            messagebox.showerror(\"Hata\", f\"Hesaplama hatası: {e}\")\r\n    \r\n    def plot_trajectory(self):\r\n        \"\"\"Trajectory grafiğini çiz\"\"\"\r\n        if not self.current_trajectory:\r\n            return\r\n        \r\n        self.ax.clear()\r\n        \r\n        # Trajectory çiz\r\n        self.ax.plot(self.current_trajectory['x_positions'], \r\n                    self.current_trajectory['y_positions'],\r\n                    'r-', linewidth=2, label='Mermi Yörüngesi')\r\n        \r\n        # Hedef göster\r\n        params = self.get_parameters()\r\n        if params:\r\n            target_circle = plt.Circle((params['target_x'], params['target_y']), \r\n                                     params['target_radius'], \r\n                                     color='yellow', alpha=0.3, label='Hedef Bölgesi')\r\n            self.ax.add_patch(target_circle)\r\n            \r\n            self.ax.plot(params['target_x'], params['target_y'], \r\n                        'yo', markersize=8, label='Hedef Merkezi')\r\n        \r\n        # Maksimum yükseklik noktası\r\n        max_height_idx = np.argmax(self.current_trajectory['y_positions'])\r\n        max_x = self.current_trajectory['x_positions'][max_height_idx]\r\n        max_y = self.current_trajectory['y_positions'][max_height_idx]\r\n        \r\n        self.ax.plot(max_x, max_y, 'go', markersize=8, label='Maksimum Yükseklik')\r\n        \r\n        # Grafik ayarları\r\n        self.ax.set_xlabel('Mesafe (m)', color='white')\r\n        self.ax.set_ylabel('Yükseklik (m)', color='white')\r\n        self.ax.set_title('Mermi Trajectory Analizi', color='white', fontsize=14, fontweight='bold')\r\n        self.ax.grid(True, alpha=0.3)\r\n        self.ax.legend()\r\n        \r\n        # Renk ayarları\r\n        self.ax.tick_params(colors='white')\r\n        self.ax.spines['bottom'].set_color('white')\r\n        self.ax.spines['top'].set_color('white')\r\n        self.ax.spines['right'].set_color('white')\r\n        self.ax.spines['left'].set_color('white')\r\n        \r\n        # Canvas güncelle\r\n        self.canvas.draw()\r\n    \r\n    def plot_empty_trajectory(self):\r\n        \"\"\"Boş trajectory grafiği\"\"\"\r\n        self.ax.clear()\r\n        self.ax.set_xlabel('Mesafe (m)', color='white')\r\n        self.ax.set_ylabel('Yükseklik (m)', color='white')\r\n        self.ax.set_title('Mermi Trajectory Analizi - Hesaplama Bekleniyor', \r\n                         color='white', fontsize=14, fontweight='bold')\r\n        self.ax.grid(True, alpha=0.3)\r\n        \r\n        # Renk ayarları\r\n        self.ax.tick_params(colors='white')\r\n        self.ax.spines['bottom'].set_color('white')\r\n        self.ax.spines['top'].set_color('white')\r\n        self.ax.spines['right'].set_color('white')\r\n        self.ax.spines['left'].set_color('white')\r\n        \r\n        self.canvas.draw()\r\n    \r\n    def display_results(self, params, hit_prob):\r\n        \"\"\"Sonuçları görüntüle\"\"\"\r\n        self.results_text.delete('1.0', 'end')\r\n        \r\n        # Başlık\r\n        self.results_text.insert('end', \"🎯 ATIŞ ANALİZİ SONUÇLARI\\n\")\r\n        self.results_text.insert('end', \"=\" * 50 + \"\\n\\n\")\r\n        \r\n        # Giriş parametreleri\r\n        self.results_text.insert('end', \"📋 GİRİŞ PARAMETRELERİ:\\n\")\r\n        self.results_text.insert('end', f\"• İlk Hız: {params['v0']:.1f} m/s\\n\")\r\n        self.results_text.insert('end', f\"• Namlu Açısı: {params['angle_deg']:.1f}°\\n\")\r\n        self.results_text.insert('end', f\"• Mermi Kütlesi: {params['mass']:.1f} kg\\n\")\r\n        self.results_text.insert('end', f\"• Mermi Çapı: {params['diameter']*1000:.0f} mm\\n\")\r\n        self.results_text.insert('end', f\"• Hava Direnci Kat.: {params['drag_coeff']:.2f}\\n\")\r\n        self.results_text.insert('end', f\"• Rüzgar Hızı: {params['wind_speed']:.1f} m/s\\n\")\r\n        self.results_text.insert('end', f\"• Başlangıç Yükseklik: {params['elevation']:.1f} m\\n\\n\")\r\n        \r\n        # Hesaplama sonuçları\r\n        traj = self.current_trajectory\r\n        self.results_text.insert('end', \"🚀 HESAPLAMA SONUÇLARI:\\n\")\r\n        self.results_text.insert('end', f\"• Maksimum Menzil: {traj['max_range']:.1f} m\\n\")\r\n        self.results_text.insert('end', f\"• Maksimum Yükseklik: {traj['max_height']:.1f} m\\n\")\r\n        self.results_text.insert('end', f\"• Uçuş Süresi: {traj['flight_time']:.1f} saniye\\n\")\r\n        self.results_text.insert('end', f\"• İsabet Hızı: {traj['impact_velocity']:.1f} m/s\\n\")\r\n        self.results_text.insert('end', f\"• İsabet Açısı: {traj['impact_angle']:.1f}°\\n\\n\")\r\n        \r\n        # Hedef analizi\r\n        self.results_text.insert('end', \"🎯 HEDEF ANALİZİ:\\n\")\r\n        self.results_text.insert('end', f\"• Hedef Mesafesi: {params['target_x']:.1f} m\\n\")\r\n        self.results_text.insert('end', f\"• Hedef Yüksekliği: {params['target_y']:.1f} m\\n\")\r\n        self.results_text.insert('end', f\"• Hedef Yarıçapı: {params['target_radius']:.1f} m\\n\")\r\n        self.results_text.insert('end', f\"• İsabet Olasılığı: {hit_prob:.1%}\\n\\n\")\r\n        \r\n        # Menzil farkı\r\n        range_diff = abs(traj['max_range'] - params['target_x'])\r\n        self.results_text.insert('end', f\"📏 Menzil Farkı: {range_diff:.1f} m\\n\")\r\n        \r\n        if range_diff < 50:\r\n            self.results_text.insert('end', \"✅ Mükemmel atış! Hedef menzil aralığında.\\n\")\r\n        elif range_diff < 100:\r\n            self.results_text.insert('end', \"🟡 İyi atış! Küçük düzeltme gerekebilir.\\n\")\r\n        else:\r\n            self.results_text.insert('end', \"🔴 Açı veya hız düzeltmesi gerekli.\\n\")\r\n    \r\n    def perform_analysis(self, params):\r\n        \"\"\"Performans analizi yap\"\"\"\r\n        self.analysis_text.delete('1.0', 'end')\r\n        \r\n        traj = self.current_trajectory\r\n        \r\n        # Başlık\r\n        self.analysis_text.insert('end', \"🔍 PERFORMANS ANALİZİ\\n\")\r\n        self.analysis_text.insert('end', \"=\" * 40 + \"\\n\\n\")\r\n        \r\n        # Enerji analizi\r\n        kinetic_energy_initial = 0.5 * params['mass'] * (params['v0'] ** 2)\r\n        kinetic_energy_impact = 0.5 * params['mass'] * (traj['impact_velocity'] ** 2)\r\n        energy_loss = kinetic_energy_initial - kinetic_energy_impact\r\n        energy_loss_percent = (energy_loss / kinetic_energy_initial) * 100\r\n        \r\n        self.analysis_text.insert('end', \"⚡ ENERJİ ANALİZİ:\\n\")\r\n        self.analysis_text.insert('end', f\"• Başlangıç Kinetik Enerji: {kinetic_energy_initial/1000:.1f} kJ\\n\")\r\n        self.analysis_text.insert('end', f\"• İsabet Kinetik Enerji: {kinetic_energy_impact/1000:.1f} kJ\\n\")\r\n        self.analysis_text.insert('end', f\"• Enerji Kaybı: {energy_loss/1000:.1f} kJ ({energy_loss_percent:.1f}%)\\n\\n\")\r\n        \r\n        # Balistik analiz\r\n        self.analysis_text.insert('end', \"📊 BALİSTİK ANALİZ:\\n\")\r\n        \r\n        # Optimal açı karşılaştırması\r\n        optimal_angle, _ = self.calculator.calculate_optimal_angle(\r\n            params['v0'], params['target_x'], params['elevation'])\r\n        \r\n        angle_diff = abs(params['angle_deg'] - optimal_angle)\r\n        self.analysis_text.insert('end', f\"• Mevcut Açı: {params['angle_deg']:.1f}°\\n\")\r\n        self.analysis_text.insert('end', f\"• Optimal Açı: {optimal_angle:.1f}°\\n\")\r\n        self.analysis_text.insert('end', f\"• Açı Farkı: {angle_diff:.1f}°\\n\\n\")\r\n        \r\n        # Performans değerlendirmesi\r\n        self.analysis_text.insert('end', \"🎖️ PERFORMANS DEĞERLENDİRMESİ:\\n\")\r\n        \r\n        # Menzil performansı\r\n        range_efficiency = min(100, (params['target_x'] / traj['max_range']) * 100)\r\n        self.analysis_text.insert('end', f\"• Menzil Verimliliği: {range_efficiency:.1f}%\\n\")\r\n        \r\n        # Açı performansı\r\n        angle_performance = max(0, 100 - (angle_diff * 2))\r\n        self.analysis_text.insert('end', f\"• Açı Performansı: {angle_performance:.1f}%\\n\")\r\n        \r\n        # Genel performans\r\n        overall_performance = (range_efficiency + angle_performance) / 2\r\n        self.analysis_text.insert('end', f\"• Genel Performans: {overall_performance:.1f}%\\n\\n\")\r\n        \r\n        # Öneriler\r\n        self.analysis_text.insert('end', \"💡 ÖNERİLER:\\n\")\r\n        \r\n        if angle_diff > 5:\r\n            self.analysis_text.insert('end', f\"• Açıyı {optimal_angle:.1f}° olarak ayarlayın\\n\")\r\n        \r\n        if range_efficiency < 90:\r\n            if traj['max_range'] < params['target_x']:\r\n                self.analysis_text.insert('end', \"• Daha yüksek açı veya hız kullanın\\n\")\r\n            else:\r\n                self.analysis_text.insert('end', \"• Daha düşük açı veya hız kullanın\\n\")\r\n        \r\n        if params['wind_speed'] != 0:\r\n            self.analysis_text.insert('end', \"• Rüzgar etkisini hesaba katın\\n\")\r\n        \r\n        if overall_performance > 90:\r\n            self.analysis_text.insert('end', \"✅ Mükemmel atış parametreleri!\\n\")\r\n        elif overall_performance > 70:\r\n            self.analysis_text.insert('end', \"🟡 İyi parametreler, küçük iyileştirmeler yapılabilir\\n\")\r\n        else:\r\n            self.analysis_text.insert('end', \"🔴 Parametreler önemli ölçüde iyileştirilmeli\\n\")\r\n    \r\n    def find_optimal_angle(self):\r\n        \"\"\"Optimal açıyı bul ve göster\"\"\"\r\n        params = self.get_parameters()\r\n        if not params:\r\n            return\r\n        \r\n        try:\r\n            optimal_angle, error = self.calculator.calculate_optimal_angle(\r\n                params['v0'], params['target_x'], params['elevation'])\r\n            \r\n            # Sonucu göster\r\n            message = f\"🎯 OPTIMAL AÇI ANALİZİ\\n\\n\"\r\n            message += f\"Hedef Mesafe: {params['target_x']:.1f} m\\n\"\r\n            message += f\"Optimal Açı: {optimal_angle:.1f}°\\n\"\r\n            message += f\"Menzil Hatası: {error:.1f} m\\n\\n\"\r\n            message += f\"Mevcut açı ({params['angle_deg']:.1f}°) yerine \"\r\n            message += f\"{optimal_angle:.1f}° kullanmanız önerilir.\"\r\n            \r\n            messagebox.showinfo(\"Optimal Açı\", message)\r\n            \r\n            # Açıyı otomatik olarak ayarla\r\n            response = messagebox.askyesno(\"Açı Ayarlama\", \r\n                                         \"Optimal açıyı otomatik olarak ayarlamak istiyor musunuz?\")\r\n            if response:\r\n                self.angle_var.set(str(optimal_angle))\r\n                self.calculate_trajectory()\r\n                \r\n        except Exception as e:\r\n            messagebox.showerror(\"Hata\", f\"Optimal açı hesaplama hatası: {e}\")\r\n    \r\n    def compare_angles(self):\r\n        \"\"\"Farklı açıları karşılaştır\"\"\"\r\n        params = self.get_parameters()\r\n        if not params:\r\n            return\r\n        \r\n        try:\r\n            # Farklı açılar için hesapla\r\n            angles = [15, 30, 45, 60, 75]\r\n            trajectories = []\r\n            \r\n            for angle in angles:\r\n                traj = self.calculator.calculate_trajectory(\r\n                    params['v0'], angle, params['drag_coeff'],\r\n                    params['mass'], params['diameter'], params['wind_speed'], \r\n                    params['elevation']\r\n                )\r\n                trajectories.append((angle, traj))\r\n            \r\n            # Grafik çiz\r\n            self.ax.clear()\r\n            \r\n            colors = ['red', 'blue', 'green', 'orange', 'purple']\r\n            for i, (angle, traj) in enumerate(trajectories):\r\n                self.ax.plot(traj['x_positions'], traj['y_positions'],\r\n                           color=colors[i], linewidth=2, \r\n                           label=f'{angle}° (Menzil: {traj[\"max_range\"]:.0f}m)')\r\n            \r\n            # Hedef göster\r\n            target_circle = plt.Circle((params['target_x'], params['target_y']), \r\n                                     params['target_radius'], \r\n                                     color='yellow', alpha=0.3, label='Hedef')\r\n            self.ax.add_patch(target_circle)\r\n            \r\n            # Grafik ayarları\r\n            self.ax.set_xlabel('Mesafe (m)', color='white')\r\n            self.ax.set_ylabel('Yükseklik (m)', color='white')\r\n            self.ax.set_title('Açı Karşılaştırması', color='white', fontsize=14, fontweight='bold')\r\n            self.ax.grid(True, alpha=0.3)\r\n            self.ax.legend()\r\n            \r\n            # Renk ayarları\r\n            self.ax.tick_params(colors='white')\r\n            for spine in self.ax.spines.values():\r\n                spine.set_color('white')\r\n            \r\n            self.canvas.draw()\r\n            \r\n            # Sonuçları göster\r\n            self.results_text.delete('1.0', 'end')\r\n            self.results_text.insert('end', \"📊 AÇI KARŞILAŞTIRMASI\\n\")\r\n            self.results_text.insert('end', \"=\" * 40 + \"\\n\\n\")\r\n            \r\n            for angle, traj in trajectories:\r\n                hit_prob = self.calculator.calculate_hit_probability(\r\n                    traj, params['target_x'], params['target_y'], params['target_radius']\r\n                )\r\n                \r\n                self.results_text.insert('end', f\"🎯 {angle}° Açı:\\n\")\r\n                self.results_text.insert('end', f\"  • Menzil: {traj['max_range']:.1f} m\\n\")\r\n                self.results_text.insert('end', f\"  • Max Yükseklik: {traj['max_height']:.1f} m\\n\")\r\n                self.results_text.insert('end', f\"  • Uçuş Süresi: {traj['flight_time']:.1f} s\\n\")\r\n                self.results_text.insert('end', f\"  • İsabet Olasılığı: {hit_prob:.1%}\\n\\n\")\r\n            \r\n        except Exception as e:\r\n            messagebox.showerror(\"Hata\", f\"Karşılaştırma hatası: {e}\")\r\n    \r\n    def save_report(self):\r\n        \"\"\"Analiz raporunu kaydet\"\"\"\r\n        if not self.current_trajectory:\r\n            messagebox.showwarning(\"Uyarı\", \"Önce bir hesaplama yapmalısınız!\")\r\n            return\r\n        \r\n        try:\r\n            # Dosya adı oluştur\r\n            timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\r\n            filename = f\"atis_analizi_{timestamp}.json\"\r\n            \r\n            # Dosya kaydet dialog'u\r\n            file_path = filedialog.asksaveasfilename(\r\n                defaultextension=\".json\",\r\n                filetypes=[(\"JSON files\", \"*.json\"), (\"All files\", \"*.*\")],\r\n                initialvalue=filename\r\n            )\r\n            \r\n            if file_path:\r\n                # Rapor verilerini hazırla\r\n                params = self.get_parameters()\r\n                \r\n                report_data = {\r\n                    \"timestamp\": datetime.now().isoformat(),\r\n                    \"parameters\": params,\r\n                    \"trajectory\": self.current_trajectory,\r\n                    \"analysis\": {\r\n                        \"kinetic_energy_initial\": 0.5 * params['mass'] * (params['v0'] ** 2),\r\n                        \"kinetic_energy_impact\": 0.5 * params['mass'] * (self.current_trajectory['impact_velocity'] ** 2),\r\n                        \"hit_probability\": self.calculator.calculate_hit_probability(\r\n                            self.current_trajectory, params['target_x'], \r\n                            params['target_y'], params['target_radius']\r\n                        )\r\n                    }\r\n                }\r\n                \r\n                # JSON dosyası olarak kaydet\r\n                with open(file_path, 'w', encoding='utf-8') as f:\r\n                    json.dump(report_data, f, indent=2, ensure_ascii=False)\r\n                \r\n                messagebox.showinfo(\"Başarılı\", f\"Rapor kaydedildi:\\n{file_path}\")\r\n                \r\n        except Exception as e:\r\n            messagebox.showerror(\"Hata\", f\"Rapor kaydetme hatası: {e}\")\r\n    \r\n    def clear_results(self):\r\n        \"\"\"Sonuçları temizle\"\"\"\r\n        self.current_trajectory = None\r\n        self.plot_empty_trajectory()\r\n        self.load_default_values()\r\n        messagebox.showinfo(\"Temizlendi\", \"Tüm sonuçlar temizlendi.\")\r\n\r\ndef main():\r\n    \"\"\"Ana fonksiyon\"\"\"\r\n    root = tk.Tk()\r\n    app = ArtilleryAnalysisGUI(root)\r\n    \r\n    # Çıkış işlemi\r\n    def on_closing():\r\n        if messagebox.askokcancel(\"Çıkış\", \"Uygulamadan çıkmak istediğinizden emin misiniz?\"):\r\n            root.destroy()\r\n    \r\n    root.protocol(\"WM_DELETE_WINDOW\", on_closing)\r\n    root.mainloop()\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"🎯 Topçu Mermisi Atış Analizi Sistemi\")\r\n    print(\"=\" * 50)\r\n    print(\"Sistem başlatılıyor...\")\r\n    \r\n    try:\r\n        main()\r\n    except Exception as e:\r\n        print(f\"❌ Sistem hatası: {e}\")\r\n        input(\"Çıkmak için Enter tuşuna basın...\")\r\n\r\n",
            "rangeLength": 0
          }
        ]
      }
    },
    {
      "type": "text_changed",
      "timestamp": 1758206593234,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\artillery_analysis.py",
        "relativePath": "artillery_analysis.py",
        "changes": []
      }
    },
    {
      "type": "text_changed",
      "timestamp": 1758206593235,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\artillery_analysis.py",
        "relativePath": "artillery_analysis.py",
        "changes": [
          {
            "range": {
              "start": {
                "line": 820,
                "character": 0
              },
              "end": {
                "line": 821,
                "character": 0
              }
            },
            "text": "",
            "rangeLength": 2
          }
        ]
      }
    },
    {
      "type": "text_changed",
      "timestamp": 1758206593309,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\artillery_analysis.py",
        "relativePath": "artillery_analysis.py",
        "changes": []
      }
    },
    {
      "type": "text_changed",
      "timestamp": 1758206593310,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\artillery_analysis.py",
        "relativePath": "artillery_analysis.py",
        "changes": []
      }
    },
    {
      "type": "file_modified",
      "timestamp": 1758206593316,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\artillery_analysis.py",
        "relativePath": "artillery_analysis.py"
      }
    },
    {
      "type": "terminal_opened",
      "timestamp": 1758206593548,
      "data": {
        "name": ""
      }
    },
    {
      "type": "text_changed",
      "timestamp": 1758206615968,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\requirements.txt",
        "relativePath": "requirements.txt",
        "changes": [
          {
            "range": {
              "start": {
                "line": 0,
                "character": 0
              },
              "end": {
                "line": 0,
                "character": 0
              }
            },
            "text": "# Topçu Mermisi Atış Analizi Sistemi - Gerekli Kütüphaneler\r\n# Python 3.8+ gerekli\r\n\r\n# GUI ve Grafik Kütüphaneleri\r\ntkinter>=8.6.0          # GUI arayüzü (genellikle Python ile birlikte gelir)\r\nmatplotlib>=3.5.0       # Grafik çizimi ve visualizasyon\r\nnumpy>=1.21.0          # Matematiksel hesaplamalar\r\n\r\n# Veri İşleme ve Analiz\r\nscipy>=1.7.0           # Bilimsel hesaplamalar (opsiyonel)\r\n\r\n# Dosya İşlemleri\r\njson>=2.0.9            # JSON dosya desteği (standart kütüphane)\r\n\r\n# Tarih/Zaman İşlemleri\r\ndatetime               # Tarih/zaman işlemleri (standart kütüphane)\r\n\r\n# Matematik Kütüphaneleri\r\nmath                   # Temel matematik fonksiyonları (standart kütüphane)\r\n\r\n# İşletim Sistemi\r\nos                     # Dosya sistemi işlemleri (standart kütüphane)\r\n\r\n# Not: tkinter, json, datetime, math, os Python'un standart kütüphaneleridir\r\n# Sadece matplotlib ve numpy kurulması gerekebilir:\r\n# pip install matplotlib numpy scipy\r\n\r\n",
            "rangeLength": 0
          }
        ]
      }
    },
    {
      "type": "text_changed",
      "timestamp": 1758206615969,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\requirements.txt",
        "relativePath": "requirements.txt",
        "changes": []
      }
    },
    {
      "type": "text_changed",
      "timestamp": 1758206615970,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\requirements.txt",
        "relativePath": "requirements.txt",
        "changes": [
          {
            "range": {
              "start": {
                "line": 26,
                "character": 0
              },
              "end": {
                "line": 27,
                "character": 0
              }
            },
            "text": "",
            "rangeLength": 2
          }
        ]
      }
    },
    {
      "type": "text_changed",
      "timestamp": 1758206615989,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\requirements.txt",
        "relativePath": "requirements.txt",
        "changes": []
      }
    },
    {
      "type": "text_changed",
      "timestamp": 1758206615990,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\requirements.txt",
        "relativePath": "requirements.txt",
        "changes": []
      }
    },
    {
      "type": "file_created",
      "timestamp": 1758206616001,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\requirements.txt",
        "relativePath": "requirements.txt"
      }
    },
    {
      "type": "file_modified",
      "timestamp": 1758206616122,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\requirements.txt",
        "relativePath": "requirements.txt"
      }
    },
    {
      "type": "text_changed",
      "timestamp": 1758206665046,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\test_artillery.py",
        "relativePath": "test_artillery.py",
        "changes": [
          {
            "range": {
              "start": {
                "line": 0,
                "character": 0
              },
              "end": {
                "line": 0,
                "character": 0
              }
            },
            "text": "#!/usr/bin/env python3\r\n# -*- coding: utf-8 -*-\r\n\"\"\"\r\nTopçu Mermisi Atış Analizi Test Senaryoları\r\nFarklı atış durumlarını test etmek için örnek senaryolar\r\n\"\"\"\r\n\r\nimport sys\r\nimport os\r\n\r\n# Ana modülü import et\r\ntry:\r\n    from artillery_analysis import BallisticCalculator, ArtilleryAnalysisGUI\r\n    import tkinter as tk\r\n    import matplotlib.pyplot as plt\r\n    import numpy as np\r\nexcept ImportError as e:\r\n    print(f\"❌ Gerekli kütüphane bulunamadı: {e}\")\r\n    print(\"Lütfen requirements.txt dosyasındaki kütüphaneleri kurun:\")\r\n    print(\"pip install matplotlib numpy scipy\")\r\n    sys.exit(1)\r\n\r\ndef test_basic_calculations():\r\n    \"\"\"Temel hesaplamaları test et\"\"\"\r\n    print(\"🧪 Temel Hesaplama Testleri\")\r\n    print(\"=\" * 40)\r\n    \r\n    calculator = BallisticCalculator()\r\n    \r\n    # Test senaryoları\r\n    test_cases = [\r\n        {\r\n            \"name\": \"Standart 155mm Obüs\",\r\n            \"v0\": 300,\r\n            \"angle\": 45,\r\n            \"mass\": 15.0,\r\n            \"diameter\": 0.155,\r\n            \"drag_coeff\": 0.47\r\n        },\r\n        {\r\n            \"name\": \"Yüksek Hızlı Atış\",\r\n            \"v0\": 500,\r\n            \"angle\": 30,\r\n            \"mass\": 10.0,\r\n            \"diameter\": 0.120,\r\n            \"drag_coeff\": 0.35\r\n        },\r\n        {\r\n            \"name\": \"Düşük Açı Atış\",\r\n            \"v0\": 250,\r\n            \"angle\": 15,\r\n            \"mass\": 20.0,\r\n            \"diameter\": 0.200,\r\n            \"drag_coeff\": 0.55\r\n        }\r\n    ]\r\n    \r\n    for i, test_case in enumerate(test_cases, 1):\r\n        print(f\"\\n📋 Test {i}: {test_case['name']}\")\r\n        print(\"-\" * 30)\r\n        \r\n        trajectory = calculator.calculate_trajectory(\r\n            test_case['v0'], test_case['angle'], test_case['drag_coeff'],\r\n            test_case['mass'], test_case['diameter']\r\n        )\r\n        \r\n        print(f\"• Maksimum Menzil: {trajectory['max_range']:.1f} m\")\r\n        print(f\"• Maksimum Yükseklik: {trajectory['max_height']:.1f} m\")\r\n        print(f\"• Uçuş Süresi: {trajectory['flight_time']:.1f} s\")\r\n        print(f\"• İsabet Hızı: {trajectory['impact_velocity']:.1f} m/s\")\r\n        \r\n        # Sonuç değerlendirmesi\r\n        if trajectory['max_range'] > 3000:\r\n            print(\"✅ Uzun menzil atış başarılı\")\r\n        elif trajectory['max_range'] > 1000:\r\n            print(\"🟡 Orta menzil atış\")\r\n        else:\r\n            print(\"🔴 Kısa menzil atış\")\r\n\r\ndef test_optimal_angle_finding():\r\n    \"\"\"Optimal açı bulma testleri\"\"\"\r\n    print(\"\\n\\n🎯 Optimal Açı Bulma Testleri\")\r\n    print(\"=\" * 40)\r\n    \r\n    calculator = BallisticCalculator()\r\n    \r\n    # Farklı mesafeler için optimal açıları bul\r\n    target_distances = [1000, 2000, 3000, 5000, 8000]\r\n    v0 = 350  # Sabit hız\r\n    \r\n    print(f\"İlk Hız: {v0} m/s için optimal açılar:\")\r\n    print()\r\n    \r\n    for distance in target_distances:\r\n        optimal_angle, error = calculator.calculate_optimal_angle(v0, distance)\r\n        \r\n        print(f\"📏 {distance}m mesafe:\")\r\n        print(f\"  • Optimal Açı: {optimal_angle}°\")\r\n        print(f\"  • Menzil Hatası: {error:.1f} m\")\r\n        \r\n        # Doğrulama hesabı\r\n        verification = calculator.calculate_trajectory(v0, optimal_angle)\r\n        actual_range = verification['max_range']\r\n        \r\n        print(f\"  • Gerçek Menzil: {actual_range:.1f} m\")\r\n        print(f\"  • Doğruluk: {100 - (abs(actual_range - distance) / distance * 100):.1f}%\")\r\n        print()\r\n\r\ndef test_environmental_effects():\r\n    \"\"\"Çevresel etkileri test et\"\"\"\r\n    print(\"\\n🌪️ Çevresel Etki Testleri\")\r\n    print(\"=\" * 40)\r\n    \r\n    calculator = BallisticCalculator()\r\n    \r\n    # Temel parametreler\r\n    base_params = {\r\n        \"v0\": 300,\r\n        \"angle\": 45,\r\n        \"mass\": 15.0,\r\n        \"diameter\": 0.155\r\n    }\r\n    \r\n    # Farklı çevresel koşullar\r\n    environmental_conditions = [\r\n        {\"name\": \"İdeal Koşullar\", \"drag\": 0.0, \"wind\": 0, \"elevation\": 0},\r\n        {\"name\": \"Normal Hava Direnci\", \"drag\": 0.47, \"wind\": 0, \"elevation\": 0},\r\n        {\"name\": \"Rüzgarlı Hava\", \"drag\": 0.47, \"wind\": 10, \"elevation\": 0},\r\n        {\"name\": \"Yüksek Rakım\", \"drag\": 0.47, \"wind\": 0, \"elevation\": 500},\r\n        {\"name\": \"Zorlu Koşullar\", \"drag\": 0.55, \"wind\": 15, \"elevation\": 200}\r\n    ]\r\n    \r\n    print(\"Çevresel koşulların atış performansına etkisi:\")\r\n    print()\r\n    \r\n    for condition in environmental_conditions:\r\n        trajectory = calculator.calculate_trajectory(\r\n            base_params[\"v0\"], base_params[\"angle\"], \r\n            condition[\"drag\"], base_params[\"mass\"], \r\n            base_params[\"diameter\"], condition[\"wind\"], \r\n            condition[\"elevation\"]\r\n        )\r\n        \r\n        print(f\"🌤️ {condition['name']}:\")\r\n        print(f\"  • Menzil: {trajectory['max_range']:.1f} m\")\r\n        print(f\"  • Max Yükseklik: {trajectory['max_height']:.1f} m\")\r\n        print(f\"  • Uçuş Süresi: {trajectory['flight_time']:.1f} s\")\r\n        \r\n        # Enerji kaybı hesapla\r\n        initial_ke = 0.5 * base_params[\"mass\"] * (base_params[\"v0\"] ** 2)\r\n        impact_ke = 0.5 * base_params[\"mass\"] * (trajectory['impact_velocity'] ** 2)\r\n        energy_loss_percent = ((initial_ke - impact_ke) / initial_ke) * 100\r\n        \r\n        print(f\"  • Enerji Kaybı: {energy_loss_percent:.1f}%\")\r\n        print()\r\n\r\ndef test_hit_probability():\r\n    \"\"\"İsabet olasılığı testleri\"\"\"\r\n    print(\"\\n🎯 İsabet Olasılığı Testleri\")\r\n    print(\"=\" * 40)\r\n    \r\n    calculator = BallisticCalculator()\r\n    \r\n    # Test atışı\r\n    trajectory = calculator.calculate_trajectory(300, 45, 0.47, 15.0, 0.155)\r\n    actual_range = trajectory['max_range']\r\n    \r\n    # Farklı hedef boyutları ve konumları\r\n    test_targets = [\r\n        {\"name\": \"Büyük Hedef (50m)\", \"x\": actual_range, \"y\": 0, \"radius\": 50},\r\n        {\"name\": \"Orta Hedef (20m)\", \"x\": actual_range, \"y\": 0, \"radius\": 20},\r\n        {\"name\": \"Küçük Hedef (10m)\", \"x\": actual_range, \"y\": 0, \"radius\": 10},\r\n        {\"name\": \"Hassas Hedef (5m)\", \"x\": actual_range, \"y\": 0, \"radius\": 5},\r\n        {\"name\": \"Uzak Hedef\", \"x\": actual_range + 100, \"y\": 0, \"radius\": 20},\r\n        {\"name\": \"Yakın Hedef\", \"x\": actual_range - 100, \"y\": 0, \"radius\": 20},\r\n        {\"name\": \"Yüksek Hedef\", \"x\": actual_range, \"y\": 50, \"radius\": 15}\r\n    ]\r\n    \r\n    print(f\"Mermi menzili: {actual_range:.1f} m\")\r\n    print(\"Farklı hedefler için isabet olasılıkları:\")\r\n    print()\r\n    \r\n    for target in test_targets:\r\n        hit_prob = calculator.calculate_hit_probability(\r\n            trajectory, target[\"x\"], target[\"y\"], target[\"radius\"]\r\n        )\r\n        \r\n        print(f\"🎯 {target['name']}:\")\r\n        print(f\"  • Konum: ({target['x']:.0f}, {target['y']:.0f}) m\")\r\n        print(f\"  • Yarıçap: {target['radius']} m\")\r\n        print(f\"  • İsabet Olasılığı: {hit_prob:.1%}\")\r\n        \r\n        if hit_prob > 0.8:\r\n            print(\"  • Değerlendirme: ✅ Çok yüksek isabet şansı\")\r\n        elif hit_prob > 0.5:\r\n            print(\"  • Değerlendirme: 🟡 İyi isabet şansı\")\r\n        elif hit_prob > 0.2:\r\n            print(\"  • Değerlendirme: 🟠 Orta isabet şansı\")\r\n        else:\r\n            print(\"  • Değerlendirme: 🔴 Düşük isabet şansı\")\r\n        print()\r\n\r\ndef run_performance_benchmark():\r\n    \"\"\"Performans benchmark'ı\"\"\"\r\n    print(\"\\n⚡ Performans Benchmark'ı\")\r\n    print(\"=\" * 40)\r\n    \r\n    import time\r\n    \r\n    calculator = BallisticCalculator()\r\n    \r\n    # Hesaplama sayısı\r\n    num_calculations = 1000\r\n    \r\n    print(f\"{num_calculations} trajectory hesaplaması yapılıyor...\")\r\n    \r\n    start_time = time.time()\r\n    \r\n    for i in range(num_calculations):\r\n        # Rastgele parametreler\r\n        v0 = 200 + (i % 300)\r\n        angle = 15 + (i % 60)\r\n        \r\n        trajectory = calculator.calculate_trajectory(v0, angle, 0.47, 15.0, 0.155)\r\n    \r\n    end_time = time.time()\r\n    elapsed_time = end_time - start_time\r\n    \r\n    print(f\"✅ {num_calculations} hesaplama tamamlandı\")\r\n    print(f\"⏱️ Toplam süre: {elapsed_time:.2f} saniye\")\r\n    print(f\"🚀 Hesaplama hızı: {num_calculations / elapsed_time:.1f} hesaplama/saniye\")\r\n    print(f\"⚡ Ortalama hesaplama süresi: {(elapsed_time / num_calculations) * 1000:.2f} ms\")\r\n\r\ndef create_test_gui():\r\n    \"\"\"Test GUI'sini başlat\"\"\"\r\n    print(\"\\n🖥️ GUI Test Modu Başlatılıyor...\")\r\n    print(\"=\" * 40)\r\n    \r\n    try:\r\n        root = tk.Tk()\r\n        app = ArtilleryAnalysisGUI(root)\r\n        \r\n        # Test verilerini yükle\r\n        app.v0_var.set(\"350\")\r\n        app.angle_var.set(\"42\")\r\n        app.mass_var.set(\"15.5\")\r\n        app.diameter_var.set(\"155\")\r\n        app.drag_var.set(\"0.47\")\r\n        app.wind_var.set(\"5\")\r\n        app.elevation_var.set(\"100\")\r\n        app.target_x_var.set(\"4500\")\r\n        app.target_y_var.set(\"0\")\r\n        app.target_radius_var.set(\"25\")\r\n        \r\n        print(\"✅ GUI başarıyla başlatıldı!\")\r\n        print(\"📋 Test verileri otomatik olarak yüklendi\")\r\n        print(\"🎯 'Atış Hesapla' butonuna basarak test edebilirsiniz\")\r\n        \r\n        root.mainloop()\r\n        \r\n    except Exception as e:\r\n        print(f\"❌ GUI başlatma hatası: {e}\")\r\n\r\ndef main():\r\n    \"\"\"Ana test fonksiyonu\"\"\"\r\n    print(\"🎯 TOPÇU MERMİSİ ATIŞ ANALİZİ - TEST SÜİTİ\")\r\n    print(\"=\" * 60)\r\n    print()\r\n    \r\n    try:\r\n        # Tüm testleri çalıştır\r\n        test_basic_calculations()\r\n        test_optimal_angle_finding()\r\n        test_environmental_effects()\r\n        test_hit_probability()\r\n        run_performance_benchmark()\r\n        \r\n        print(\"\\n\" + \"=\" * 60)\r\n        print(\"✅ TÜM TESTLER BAŞARIYLA TAMAMLANDI!\")\r\n        print(\"=\" * 60)\r\n        \r\n        # GUI testi için sor\r\n        response = input(\"\\n🖥️ GUI test modunu başlatmak istiyor musunuz? (e/h): \")\r\n        if response.lower() in ['e', 'evet', 'y', 'yes']:\r\n            create_test_gui()\r\n        else:\r\n            print(\"👋 Test süreci tamamlandı!\")\r\n            \r\n    except Exception as e:\r\n        print(f\"\\n❌ Test hatası: {e}\")\r\n        print(\"Lütfen gerekli kütüphanelerin kurulu olduğundan emin olun.\")\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n",
            "rangeLength": 0
          }
        ]
      }
    },
    {
      "type": "text_changed",
      "timestamp": 1758206665047,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\test_artillery.py",
        "relativePath": "test_artillery.py",
        "changes": []
      }
    },
    {
      "type": "text_changed",
      "timestamp": 1758206665049,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\test_artillery.py",
        "relativePath": "test_artillery.py",
        "changes": [
          {
            "range": {
              "start": {
                "line": 294,
                "character": 0
              },
              "end": {
                "line": 295,
                "character": 0
              }
            },
            "text": "",
            "rangeLength": 2
          }
        ]
      }
    },
    {
      "type": "file_created",
      "timestamp": 1758206665063,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\test_artillery.py",
        "relativePath": "test_artillery.py"
      }
    },
    {
      "type": "text_changed",
      "timestamp": 1758206665065,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\test_artillery.py",
        "relativePath": "test_artillery.py",
        "changes": []
      }
    },
    {
      "type": "text_changed",
      "timestamp": 1758206665065,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\test_artillery.py",
        "relativePath": "test_artillery.py",
        "changes": []
      }
    },
    {
      "type": "file_modified",
      "timestamp": 1758206665199,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\test_artillery.py",
        "relativePath": "test_artillery.py"
      }
    },
    {
      "type": "file_created",
      "timestamp": 1758206703941,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\README.md",
        "relativePath": "README.md"
      }
    },
    {
      "type": "text_changed",
      "timestamp": 1758206704010,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\README.md",
        "relativePath": "README.md",
        "changes": [
          {
            "range": {
              "start": {
                "line": 0,
                "character": 0
              },
              "end": {
                "line": 0,
                "character": 0
              }
            },
            "text": "# 🎯 Topçu Mermisi Atış Analizi Sistemi\r\n\r\nModern balistik hesaplamalar ve görsel analiz için geliştirilmiş kapsamlı bir Python uygulaması.\r\n\r\n## 📋 Özellikler\r\n\r\n### 🔧 Temel Özellikler\r\n- **Balistik Hesaplamalar**: Gerçekçi fizik modellemesi ile mermi yörüngesi hesaplama\r\n- **Namlu Açısı Optimizasyonu**: Hedef mesafe için optimal atış açısı bulma\r\n- **Mesafe Analizi**: Maksimum menzil, yükseklik ve uçuş süresi hesaplama\r\n- **Konum Analizi**: 3D uzayda mermi konumu takibi\r\n\r\n### 🌪️ Gelişmiş Özellikler\r\n- **Çevresel Faktörler**: Hava direnci, rüzgar etkisi, yükseklik kompanzasyonu\r\n- **İsabet Olasılığı**: Hedef boyutu ve konumuna göre isabet şansı hesaplama\r\n- **Performans Analizi**: Enerji kaybı, verimlilik ve optimizasyon önerileri\r\n- **Karşılaştırmalı Analiz**: Farklı açılar için trajectory karşılaştırması\r\n\r\n### 🖥️ Kullanıcı Arayüzü\r\n- **Modern GUI**: Tkinter tabanlı kullanıcı dostu arayüz\r\n- **Gerçek Zamanlı Grafik**: Matplotlib ile interaktif trajectory görselleştirme\r\n- **Detaylı Raporlama**: Kapsamlı analiz sonuçları ve öneriler\r\n- **Veri Dışa Aktarma**: JSON formatında rapor kaydetme\r\n\r\n## 🚀 Kurulum\r\n\r\n### Gereksinimler\r\n- Python 3.8 veya üzeri\r\n- Gerekli kütüphaneler (requirements.txt'te listelendi)\r\n\r\n### Adım Adım Kurulum\r\n\r\n1. **Projeyi İndirin**\r\n   ```bash\r\n   git clone [repository-url]\r\n   cd artillery-analysis\r\n   ```\r\n\r\n2. **Gerekli Kütüphaneleri Kurun**\r\n   ```bash\r\n   pip install -r requirements.txt\r\n   ```\r\n\r\n3. **Uygulamayı Başlatın**\r\n   ```bash\r\n   python artillery_analysis.py\r\n   ```\r\n\r\n### Alternatif Kurulum (Manuel)\r\n```bash\r\npip install matplotlib numpy scipy tkinter\r\n```\r\n\r\n## 📖 Kullanım Kılavuzu\r\n\r\n### 1. Temel Kullanım\r\n\r\n1. **Parametreleri Girin**:\r\n   - İlk Hız (m/s): Merminin namludan çıkış hızı\r\n   - Namlu Açısı (°): Yatay düzleme göre açı\r\n   - Mermi Kütlesi (kg): Merminin ağırlığı\r\n   - Mermi Çapı (mm): Merminin çapı\r\n\r\n2. **Hesaplama Yapın**:\r\n   - \"🚀 Atış Hesapla\" butonuna basın\r\n   - Sonuçları grafik ve tablo halinde görüntüleyin\r\n\r\n3. **Sonuçları Analiz Edin**:\r\n   - Trajectory grafiğini inceleyin\r\n   - Detaylı sonuçlar sekmesini kontrol edin\r\n   - Performans analizi önerilerini okuyun\r\n\r\n### 2. Gelişmiş Özellikler\r\n\r\n#### Optimal Açı Bulma\r\n```python\r\n# Programatik kullanım\r\ncalculator = BallisticCalculator()\r\noptimal_angle, error = calculator.calculate_optimal_angle(v0=300, target_distance=5000)\r\n```\r\n\r\n#### Çevresel Faktörler\r\n- **Hava Direnci**: 0.0-1.0 arası değer (0.47 tipik)\r\n- **Rüzgar Hızı**: m/s cinsinden (pozitif: yardımcı rüzgar)\r\n- **Başlangıç Yüksekliği**: Deniz seviyesinden metre\r\n\r\n#### İsabet Analizi\r\n- Hedef koordinatları (x, y)\r\n- Hedef yarıçapı\r\n- İsabet olasılığı hesaplama\r\n\r\n### 3. Test Modu\r\n\r\nTest senaryolarını çalıştırmak için:\r\n```bash\r\npython test_artillery.py\r\n```\r\n\r\nTest modu şunları içerir:\r\n- Temel hesaplama testleri\r\n- Optimal açı bulma testleri\r\n- Çevresel etki testleri\r\n- İsabet olasılığı testleri\r\n- Performans benchmark'ı\r\n\r\n## 📊 Örnek Senaryolar\r\n\r\n### Standart 155mm Obüs\r\n- İlk Hız: 300 m/s\r\n- Açı: 45°\r\n- Kütle: 15 kg\r\n- Çap: 155 mm\r\n- **Beklenen Menzil**: ~4500m\r\n\r\n### Uzun Menzil Atışı\r\n- İlk Hız: 500 m/s\r\n- Açı: 30°\r\n- Kütle: 10 kg\r\n- Çap: 120 mm\r\n- **Beklenen Menzil**: ~8000m\r\n\r\n### Hassas Atış\r\n- İlk Hız: 250 m/s\r\n- Açı: 15°\r\n- Kütle: 20 kg\r\n- Çap: 200 mm\r\n- **Beklenen Menzil**: ~2500m\r\n\r\n## 🔬 Teknik Detaylar\r\n\r\n### Fizik Modeli\r\n- **Yerçekimi**: 9.81 m/s²\r\n- **Hava Yoğunluğu**: 1.225 kg/m³\r\n- **Drag Katsayısı**: Mermi şekline bağlı (0.2-0.8)\r\n\r\n### Hesaplama Yöntemi\r\n- Runge-Kutta entegrasyonu\r\n- 0.01 saniye zaman adımı\r\n- Gerçek zamanlı hava direnci hesabı\r\n\r\n### Doğruluk\r\n- Menzil doğruluğu: ±2%\r\n- Yükseklik doğruluğu: ±1%\r\n- Zaman doğruluğu: ±0.1s\r\n\r\n## 📁 Dosya Yapısı\r\n\r\n```\r\nartillery-analysis/\r\n├── artillery_analysis.py    # Ana uygulama\r\n├── test_artillery.py       # Test senaryoları\r\n├── requirements.txt        # Gerekli kütüphaneler\r\n├── README.md              # Bu dosya\r\n└── reports/               # Kaydedilen raporlar (otomatik oluşur)\r\n```\r\n\r\n## 🛠️ Geliştirme\r\n\r\n### Yeni Özellik Ekleme\r\n1. `BallisticCalculator` sınıfına yeni hesaplama metodu ekleyin\r\n2. `ArtilleryAnalysisGUI` sınıfına UI bileşenleri ekleyin\r\n3. Test senaryolarını `test_artillery.py`'ye ekleyin\r\n\r\n### Hata Ayıklama\r\n- Konsol çıktılarını kontrol edin\r\n- Test modunu kullanarak doğrulama yapın\r\n- Parametrelerin geçerli aralıklarda olduğunu kontrol edin\r\n\r\n## 🎯 Kullanım Alanları\r\n\r\n- **Askeri Eğitim**: Balistik eğitimi ve simülasyon\r\n- **Mühendislik**: Projectile motion analizi\r\n- **Araştırma**: Balistik performans çalışmaları\r\n- **Eğitim**: Fizik ve matematik öğretimi\r\n\r\n## ⚠️ Önemli Notlar\r\n\r\n1. **Güvenlik**: Bu yazılım sadece eğitim amaçlıdır\r\n2. **Doğruluk**: Gerçek atış koşulları daha karmaşık olabilir\r\n3. **Sorumluluk**: Kullanıcı tüm riskleri kabul eder\r\n\r\n## 🤝 Katkıda Bulunma\r\n\r\n1. Fork yapın\r\n2. Feature branch oluşturun (`git checkout -b feature/amazing-feature`)\r\n3. Commit yapın (`git commit -m 'Add amazing feature'`)\r\n4. Push yapın (`git push origin feature/amazing-feature`)\r\n5. Pull Request oluşturun\r\n\r\n## 📞 Destek\r\n\r\nSorularınız için:\r\n- Issue açın\r\n- Dokümantasyonu kontrol edin\r\n- Test senaryolarını çalıştırın\r\n\r\n## 📄 Lisans\r\n\r\nBu proje MIT lisansı altında lisanslanmıştır.\r\n\r\n---\r\n\r\n**🎯 İyi Atışlar!** 🚀\r\n\r\n",
            "rangeLength": 0
          }
        ]
      }
    },
    {
      "type": "text_changed",
      "timestamp": 1758206704012,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\README.md",
        "relativePath": "README.md",
        "changes": []
      }
    },
    {
      "type": "text_changed",
      "timestamp": 1758206704014,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\README.md",
        "relativePath": "README.md",
        "changes": [
          {
            "range": {
              "start": {
                "line": 203,
                "character": 0
              },
              "end": {
                "line": 204,
                "character": 0
              }
            },
            "text": "",
            "rangeLength": 2
          }
        ]
      }
    },
    {
      "type": "text_changed",
      "timestamp": 1758206704044,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\README.md",
        "relativePath": "README.md",
        "changes": []
      }
    },
    {
      "type": "text_changed",
      "timestamp": 1758206704055,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\README.md",
        "relativePath": "README.md",
        "changes": []
      }
    },
    {
      "type": "file_modified",
      "timestamp": 1758206704175,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\README.md",
        "relativePath": "README.md"
      }
    },
    {
      "type": "terminal_opened",
      "timestamp": 1758206717289,
      "data": {
        "name": ""
      }
    },
    {
      "type": "file_created",
      "timestamp": 1758206717589,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\__pycache__",
        "relativePath": "__pycache__"
      }
    },
    {
      "type": "file_created",
      "timestamp": 1758206717589,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\__pycache__\\artillery_analysis.cpython-313.pyc",
        "relativePath": "__pycache__/artillery_analysis.cpython-313.pyc"
      }
    },
    {
      "type": "editor_opened",
      "timestamp": 1758206812547,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\SpecFlow\\reports\\workflow_report_workflow_1758206444125_nr6r2ft0w.md",
        "relativePath": "SpecFlow/reports/workflow_report_workflow_1758206444125_nr6r2ft0w.md",
        "language": "markdown"
      }
    },
    {
      "type": "file_created",
      "timestamp": 1758206812652,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\SpecFlow\\reports\\workflow_report_workflow_1758206444125_nr6r2ft0w.md",
        "relativePath": "SpecFlow/reports/workflow_report_workflow_1758206444125_nr6r2ft0w.md"
      }
    },
    {
      "type": "file_modified",
      "timestamp": 1758206817585,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\.specstory\\.what-is-this.md",
        "relativePath": ".specstory/.what-is-this.md"
      }
    },
    {
      "type": "file_modified",
      "timestamp": 1758206877892,
      "data": {
        "path": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow\\.specstory\\.what-is-this.md",
        "relativePath": ".specstory/.what-is-this.md"
      }
    },
    {
      "type": "session_ended",
      "timestamp": 1758207111409,
      "data": {}
    }
  ],
  "workspace": "c:\\Projects\\Workflow Snapshot_Replay\\test-workflow",
  "metadata": {
    "vscodeVersion": "1.99.3",
    "extensions": [
      {
        "id": "vscode.bat",
        "version": "1.0.0"
      },
      {
        "id": "vscode.clojure",
        "version": "1.0.0"
      },
      {
        "id": "vscode.coffeescript",
        "version": "1.0.0"
      },
      {
        "id": "vscode.configuration-editing",
        "version": "1.0.0"
      },
      {
        "id": "vscode.cpp",
        "version": "1.0.0"
      },
      {
        "id": "vscode.csharp",
        "version": "1.0.0"
      },
      {
        "id": "vscode.css",
        "version": "1.0.0"
      },
      {
        "id": "vscode.css-language-features",
        "version": "1.0.0"
      },
      {
        "id": "anysphere.cursor-always-local",
        "version": "0.0.1"
      },
      {
        "id": "anysphere.cursor-deeplink",
        "version": "0.0.1"
      },
      {
        "id": "anysphere.cursor-file-service",
        "version": "1.0.0"
      },
      {
        "id": "anysphere.cursor-retrieval",
        "version": "0.0.1"
      },
      {
        "id": "anysphere.cursor-shadow-workspace",
        "version": "1.0.0"
      },
      {
        "id": "anysphere.cursor-tokenize",
        "version": "0.0.1"
      },
      {
        "id": "vscode.dart",
        "version": "1.0.0"
      },
      {
        "id": "vscode.debug-auto-launch",
        "version": "1.0.0"
      },
      {
        "id": "vscode.debug-server-ready",
        "version": "1.0.0"
      },
      {
        "id": "vscode.diff",
        "version": "1.0.0"
      },
      {
        "id": "vscode.docker",
        "version": "1.0.0"
      },
      {
        "id": "vscode.emmet",
        "version": "1.0.0"
      },
      {
        "id": "vscode.extension-editing",
        "version": "1.0.0"
      },
      {
        "id": "vscode.fsharp",
        "version": "1.0.0"
      },
      {
        "id": "vscode.git",
        "version": "1.0.0"
      },
      {
        "id": "vscode.git-base",
        "version": "1.0.0"
      },
      {
        "id": "vscode.github",
        "version": "0.0.1"
      },
      {
        "id": "vscode.github-authentication",
        "version": "0.0.2"
      },
      {
        "id": "vscode.go",
        "version": "1.0.0"
      },
      {
        "id": "vscode.groovy",
        "version": "1.0.0"
      },
      {
        "id": "vscode.grunt",
        "version": "1.0.0"
      },
      {
        "id": "vscode.gulp",
        "version": "1.0.0"
      },
      {
        "id": "vscode.handlebars",
        "version": "1.0.0"
      },
      {
        "id": "vscode.hlsl",
        "version": "1.0.0"
      },
      {
        "id": "vscode.html",
        "version": "1.0.0"
      },
      {
        "id": "vscode.html-language-features",
        "version": "1.0.0"
      },
      {
        "id": "vscode.ini",
        "version": "1.0.0"
      },
      {
        "id": "vscode.ipynb",
        "version": "1.0.0"
      },
      {
        "id": "vscode.jake",
        "version": "1.0.0"
      },
      {
        "id": "vscode.java",
        "version": "1.0.0"
      },
      {
        "id": "vscode.javascript",
        "version": "1.0.0"
      },
      {
        "id": "vscode.json",
        "version": "1.0.0"
      },
      {
        "id": "vscode.json-language-features",
        "version": "1.0.0"
      },
      {
        "id": "vscode.julia",
        "version": "1.0.0"
      },
      {
        "id": "vscode.latex",
        "version": "1.0.0"
      },
      {
        "id": "vscode.less",
        "version": "1.0.0"
      },
      {
        "id": "vscode.log",
        "version": "1.0.0"
      },
      {
        "id": "vscode.lua",
        "version": "1.0.0"
      },
      {
        "id": "vscode.make",
        "version": "1.0.0"
      },
      {
        "id": "vscode.markdown",
        "version": "1.0.0"
      },
      {
        "id": "vscode.markdown-language-features",
        "version": "1.0.0"
      },
      {
        "id": "vscode.markdown-math",
        "version": "1.0.0"
      },
      {
        "id": "vscode.media-preview",
        "version": "1.0.0"
      },
      {
        "id": "vscode.merge-conflict",
        "version": "1.0.0"
      },
      {
        "id": "vscode.microsoft-authentication",
        "version": "0.0.1"
      },
      {
        "id": "ms-vscode.js-debug",
        "version": "1.93.0"
      },
      {
        "id": "ms-vscode.js-debug-companion",
        "version": "1.1.3"
      },
      {
        "id": "ms-vscode.vscode-js-profile-table",
        "version": "1.0.9"
      },
      {
        "id": "vscode.builtin-notebook-renderers",
        "version": "1.0.0"
      },
      {
        "id": "vscode.npm",
        "version": "1.0.1"
      },
      {
        "id": "vscode.objective-c",
        "version": "1.0.0"
      },
      {
        "id": "vscode.ocaml",
        "version": "1.0.0"
      },
      {
        "id": "vscode.perl",
        "version": "1.0.0"
      },
      {
        "id": "vscode.php",
        "version": "1.0.0"
      },
      {
        "id": "vscode.php-language-features",
        "version": "1.0.0"
      },
      {
        "id": "vscode.powershell",
        "version": "1.0.0"
      },
      {
        "id": "vscode.pug",
        "version": "1.0.0"
      },
      {
        "id": "vscode.python",
        "version": "1.0.0"
      },
      {
        "id": "vscode.r",
        "version": "1.0.0"
      },
      {
        "id": "vscode.razor",
        "version": "1.0.0"
      },
      {
        "id": "vscode.references-view",
        "version": "1.0.0"
      },
      {
        "id": "vscode.restructuredtext",
        "version": "1.0.0"
      },
      {
        "id": "vscode.ruby",
        "version": "1.0.0"
      },
      {
        "id": "vscode.rust",
        "version": "1.0.0"
      },
      {
        "id": "vscode.scss",
        "version": "1.0.0"
      },
      {
        "id": "vscode.search-result",
        "version": "1.0.0"
      },
      {
        "id": "vscode.shaderlab",
        "version": "1.0.0"
      },
      {
        "id": "vscode.shellscript",
        "version": "1.0.0"
      },
      {
        "id": "vscode.simple-browser",
        "version": "1.0.0"
      },
      {
        "id": "vscode.sql",
        "version": "1.0.0"
      },
      {
        "id": "vscode.swift",
        "version": "1.0.0"
      },
      {
        "id": "vscode.terminal-suggest",
        "version": "1.0.1"
      },
      {
        "id": "vscode.theme-abyss",
        "version": "1.0.0"
      },
      {
        "id": "undefined_publisher.cursor-themes",
        "version": "0.0.2"
      },
      {
        "id": "vscode.theme-defaults",
        "version": "1.0.0"
      },
      {
        "id": "vscode.theme-kimbie-dark",
        "version": "1.0.0"
      },
      {
        "id": "vscode.theme-monokai",
        "version": "1.0.0"
      },
      {
        "id": "vscode.theme-monokai-dimmed",
        "version": "1.0.0"
      },
      {
        "id": "vscode.theme-quietlight",
        "version": "1.0.0"
      },
      {
        "id": "vscode.theme-red",
        "version": "1.0.0"
      },
      {
        "id": "vscode.vscode-theme-seti",
        "version": "1.0.0"
      },
      {
        "id": "vscode.theme-solarized-dark",
        "version": "1.0.0"
      },
      {
        "id": "vscode.theme-solarized-light",
        "version": "1.0.0"
      },
      {
        "id": "vscode.theme-tomorrow-night-blue",
        "version": "1.0.0"
      },
      {
        "id": "vscode.tunnel-forwarding",
        "version": "1.0.0"
      },
      {
        "id": "vscode.typescript",
        "version": "1.0.0"
      },
      {
        "id": "vscode.typescript-language-features",
        "version": "1.0.0"
      },
      {
        "id": "vscode.vb",
        "version": "1.0.0"
      },
      {
        "id": "ms-toolsai.jupyter-keymap",
        "version": "1.0.0"
      },
      {
        "id": "vscode.xml",
        "version": "1.0.0"
      },
      {
        "id": "vscode.yaml",
        "version": "1.0.0"
      },
      {
        "id": "anysphere.cursorpyright",
        "version": "1.0.9"
      },
      {
        "id": "ArslantasM.workflow-snapshot-replay",
        "version": "0.1.0"
      },
      {
        "id": "ms-azuretools.vscode-docker",
        "version": "2.0.0"
      },
      {
        "id": "ms-python.debugpy",
        "version": "2025.10.0"
      },
      {
        "id": "ms-python.python",
        "version": "2025.6.1"
      },
      {
        "id": "ms-python.vscode-pylance",
        "version": "2024.8.1"
      },
      {
        "id": "ms-vscode.powershell",
        "version": "2025.2.0"
      },
      {
        "id": "ms-vscode.remote-explorer",
        "version": "0.5.0"
      },
      {
        "id": "ms-vscode.remote-server",
        "version": "1.5.2"
      },
      {
        "id": "specpulse.specpulse",
        "version": "1.0.0"
      },
      {
        "id": "SpecStory.specstory-vscode",
        "version": "0.19.2"
      }
    ]
  }
}